@model Integrador.Models.Usuario

@{
    ViewBag.Title = "Registro";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Registro</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Usuario</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.ID1, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ID1, new { htmlAttributes = new { @class = "form-control", required = true } })
                @Html.ValidationMessageFor(model => model.ID1, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control", required = true } })
                @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Apellido_P, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Apellido_P, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Apellido_P, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Apellido_M, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Apellido_M, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Apellido_M, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Fecha_N, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Fecha_N, new { htmlAttributes = new { @class = "form-control", @type = "date", required = true } })
                @Html.ValidationMessageFor(model => model.Fecha_N, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (ViewBag.TUsuario == "Admin")
        {
            <div class="form-group">
                @Html.LabelFor(model => model.T_Usuario, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.T_Usuario, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.T_Usuario, "", new { @class = "text-danger" })
                </div>
            </div>
        }

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @type = "email", required = true } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Pregunta, htmlAttributes: new { @class = "control-label col-md-2", })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Pregunta, new { htmlAttributes = new { @class = "form-control", required = true } })
                @Html.ValidationMessageFor(model => model.Pregunta, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Respuesta, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Respuesta, new { htmlAttributes = new { @class = "form-control", required = true } })
                @Html.ValidationMessageFor(model => model.Respuesta, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Imagen, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Imagen, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Imagen, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.PasswordFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", required = true, @maxlength = 16, @minlength = 5 } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Manager, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.PasswordFor(model => model.Manager, new { htmlAttributes = new { @class = "form-control", required = true, @maxlength = 16, @minlength = 5 } })
                @Html.ValidationMessageFor(model => model.Manager, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>

    <script src="~/Scripts/autocomplete1.10.2.js"></script>
    <script src="~/Scripts/autocomplete1.11.4.js"></script>
    <link href="~/Content/autocomplete.css" rel="stylesheet" />

    <script>
         var root = "@Url.Content("~")";

       // //--Asignar Sociedades
       //var sociedad = $("#SELECT_SOCIEDADES1").val();
       // if (sociedad != null) {
       //     var jsval = $.parseJSON(sociedad);
       //     for (var i = 0; i < jsval.length; i++) {
       //         var ids = "#selectcocode #" + jsval[i] + "";
       //         $(ids).prop('selected', true);
       //     }
       // }

       // //--Inicializar combos
       // var elem = document.querySelectorAll('select');
       // var options = [];
       // var instance = M.FormSelect.init(elem, options);



        $("#input_puesto").attr("type", "text");

        $('#EMAIL').on("focusout", function () {
            var email = $('#EMAIL').val();
            $('#EMAIL').removeClass("valid");
            $('#EMAIL').removeClass("invalid");
            if (validateEmail(email) == true) {
                $('#EMAIL').addClass("valid");
            }
            else {
                $('#EMAIL').addClass("invalid");
            }
        });

        function validateEmail(email) {
            var re = /^(([^<>()\[\]\\.,;:\s@@"]+(\.[^<>()\[\]\\.,;:\s@@"]+)*)|(".+"))@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            return re.test(String(email).toLowerCase());
        }
        var auto = $.noConflict();
        //$('body').on('keydown.autocomplete', '#input_puesto', function () {

        //    auto(this).autocomplete({
        //        source: function (request, response) {
        //            auto.ajax({
        //                type: "POST",
        //                url: root +'Usuarios/Nivel',
        //                dataType: "json",
        //                data: { "Prefix": request.term },
        //                success: function (data) {
        //                    response(auto.map(data, function (item) {
        //                        return { label: item.ID + " | " + item.TEXTO, value: item.ID };
        //                    }))
        //                }
        //            })
        //        },

        //        messages: {
        //            noResults: '',
        //            results: function (resultsCount) { }
        //        },

        //        change: function (e, ui) {
        //            if (!(ui.item)) {
        //                e.target.value = "";
        //            }
        //        },

        //        select: function (event, ui) {
        //        }
        //    });
        //});


    </script>

}

<div>
    @Html.ActionLink("Regresar", "Index")
</div>
